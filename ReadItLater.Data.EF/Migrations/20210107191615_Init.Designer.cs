// <auto-generated />
using System;
using Core.Data.EFCore.Utils;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ReadItLater.Data.EF.Migrations
{
    [DbContext(typeof(EfDbContext))]
    [Migration("20210107191615_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ReadItLater.Data.Folder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("ReadItLater.Data.Ref", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Refs");
                });

            modelBuilder.Entity("ReadItLater.Data.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<Guid?>("RefId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("RefId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ReadItLater.Data.TagRef", b =>
                {
                    b.Property<Guid>("RefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RefId", "TagId");

                    b.HasIndex("TagId");

                    b.HasIndex("RefId", "TagId")
                        .IsUnique();

                    b.ToTable("TagRefs");
                });

            modelBuilder.Entity("ReadItLater.Data.Folder", b =>
                {
                    b.HasOne("ReadItLater.Data.Folder", "Parent")
                        .WithMany("Folders")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ReadItLater.Data.Ref", b =>
                {
                    b.HasOne("ReadItLater.Data.Folder", "Folder")
                        .WithMany("Refs")
                        .HasForeignKey("FolderId");
                });

            modelBuilder.Entity("ReadItLater.Data.Tag", b =>
                {
                    b.HasOne("ReadItLater.Data.Ref", null)
                        .WithMany("Tags")
                        .HasForeignKey("RefId");
                });

            modelBuilder.Entity("ReadItLater.Data.TagRef", b =>
                {
                    b.HasOne("ReadItLater.Data.Ref", "Ref")
                        .WithMany("TagRels")
                        .HasForeignKey("RefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadItLater.Data.Tag", "Tag")
                        .WithMany("TagRels")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
